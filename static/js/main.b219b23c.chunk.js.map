{"version":3,"sources":["context/ShapesContext.tsx","components/Shape.tsx","actions/ShapeActions.ts","requests/index.ts","components/AddShapeModal.tsx","components/AddShape.tsx","components/ShapesList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultState","loading","error","shapes","shapeOptions","name","value","reducer","state","action","type","payload","Context","React","createContext","Provider","children","useReducer","dispatch","Shape","props","xmlns","height","width","viewBox","x","y","cx","cy","r","points","addShapes","fetchError","API_URL","process","getShapes","a","fetch","response","json","data","updateShapes","body","method","headers","JSON","stringify","AddShapeModal","useContext","ShapesContext","useState","radioValue","setRadioValue","disabled","setDisabled","setError","Modal","onExit","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Alert","variant","Form","map","radio","Check","label","checked","onChange","event","currentTarget","Footer","Button","onClick","onHide","newShape","Date","now","requestData","onSubmit","AddShape","modalShow","setModalShow","hideModal","Container","className","Nav","Link","as","aria-hidden","show","ShapesList","useEffect","result","fetchShapes","Spinner","animation","role","Row","Col","shape","xs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b219b23c.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\nimport { ShapeActions, ShapesStateType, ShapeContextType } from '../types';\n\nconst defaultState: ShapesStateType = {\n  loading: true,\n  error: null,\n  shapes: [],\n  shapeOptions: [\n    {\n      name: 'Square',\n      value: 'square',\n    },\n    {\n      name: 'Circle',\n      value: 'circle',\n    },\n    {\n      name: 'Triangle',\n      value: 'triangle',\n    },\n  ],\n};\n\nconst reducer = (\n  state: ShapesStateType,\n  action: ShapeActions\n): ShapesStateType => {\n  switch (action.type) {\n    case 'LOAD':\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case 'ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    case 'ADD':\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        shapes: [...state.shapes, ...action.payload],\n      };\n\n    case 'UPDATE':\n      return {\n        ...state,\n        shapes: [...state.shapes, action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const Context = React.createContext({} as ShapeContextType);\n\nexport const Provider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, defaultState);\n\n  return (\n    <Context.Provider value={{ state, dispatch }}>{children}</Context.Provider>\n  );\n};\n","import React, { FC } from 'react';\nimport { ShapeTypesType } from '../types';\nexport type ShapeType = ShapeTypesType;\n\ntype ShapeProps = {\n  type: ShapeType;\n};\n\nconst Shape: FC<ShapeProps> = (props: ShapeProps) => {\n  const { type } = props;\n\n  switch (type) {\n    case 'square':\n      return (\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          height='100%'\n          width='100%'\n          viewBox='0 0 100 100'\n        >\n          <rect x='0' y='0' width='100' height='100'>\n            <title>Square</title>\n          </rect>\n        </svg>\n      );\n\n    case 'circle':\n      return (\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          height='100%'\n          width='100%'\n          viewBox='0 0 100 100'\n        >\n          <circle cx='50' cy='50' r='50'>\n            <title>Circle</title>\n          </circle>\n        </svg>\n      );\n\n    case 'triangle':\n      return (\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          height='100%'\n          width='100%'\n          viewBox='0 0 100 100'\n        >\n          <polygon points='50 0, 100 100, 0 100'>\n            <title>Triangle</title>\n          </polygon>\n        </svg>\n      );\n\n    default:\n      return null;\n  }\n};\n\nexport default Shape;\n","import { ShapeActions, ShapeType } from '../types';\n\nexport const addShapes = (shapes: ShapeType[]): ShapeActions => ({\n  type: 'ADD',\n  payload: shapes,\n});\n\nexport const fetchError = (error: string): ShapeActions => ({\n  type: 'ERROR',\n  payload: error,\n});\n\nexport const updateShapesList = (shape: ShapeType): ShapeActions => ({\n  type: 'UPDATE',\n  payload: shape,\n});\n","import { ShapesUpdateRequestBody } from '../types';\n\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const getShapes = async () => {\n  const response = await fetch(API_URL);\n  const data = await response.json();\n  return data;\n};\n\nexport const updateShapes = async (body: ShapesUpdateRequestBody) => {\n  const response = await fetch(API_URL, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  });\n  const data = await response.json();\n  return data;\n};\n","import React, { FC, useState, useContext } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport Modal, { ModalProps } from 'react-bootstrap/Modal';\nimport { Context as ShapesContext } from '../context/ShapesContext';\nimport { updateShapesList } from '../actions/ShapeActions';\nimport { updateShapes } from '../requests';\n\nconst AddShapeModal: FC<ModalProps> = (props: ModalProps) => {\n  const {\n    state: { shapes, shapeOptions },\n    dispatch,\n  } = useContext(ShapesContext);\n\n  const [radioValue, setRadioValue] = useState('square');\n  const [disabled, setDisabled] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleSubmit = () => {\n    const newShape = {\n      id: Date.now(),\n      type: radioValue,\n    };\n\n    setDisabled(true);\n\n    (async () => {\n      try {\n        const requestData = {\n          shapes: [...shapes, newShape],\n        };\n\n        await updateShapes(requestData);\n        dispatch(updateShapesList(newShape));\n        setDisabled(false);\n        props.onSubmit();\n      } catch (error) {\n        setError(true);\n        setDisabled(false);\n      }\n    })();\n  };\n\n  /**\n   * Reset the local state when closing the modal.\n   */\n  const handleClose = () => {\n    setError(false);\n    setDisabled(false);\n  };\n\n  return (\n    <Modal\n      {...props}\n      onExit={handleClose}\n      size='lg'\n      aria-labelledby='contained-modal-title-vcenter'\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id='contained-modal-title-vcenter'>Add Shape</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        {error && (\n          <Alert variant='danger'>\n            There was an error adding your shape. Try again.\n          </Alert>\n        )}\n        <Form>\n          {shapeOptions.map((radio) => {\n            const { name, value } = radio;\n            return (\n              <Form.Check\n                key={value}\n                label={name}\n                type='radio'\n                id={value}\n                value={value}\n                checked={radioValue === value}\n                onChange={(event) => setRadioValue(event.currentTarget.value)}\n              />\n            );\n          })}\n        </Form>\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button variant='secondary' onClick={props.onHide}>\n          Cancel\n        </Button>\n        <Button disabled={disabled} onClick={handleSubmit} type='submit'>\n          Add\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default AddShapeModal;\n","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button';\nimport AddShapeModal from './AddShapeModal';\n\nfunction AddShape() {\n  const [modalShow, setModalShow] = useState(false);\n\n  const hideModal = () => setModalShow(false);\n\n  return (\n    <Container className='pb-3'>\n      <Nav className='justify-content-end'>\n        <Nav.Link\n          as={Button}\n          variant='primary'\n          onClick={() => setModalShow(true)}\n        >\n          Add Shape <span aria-hidden='true'>+</span>\n        </Nav.Link>\n\n        <AddShapeModal\n          show={modalShow}\n          onHide={hideModal}\n          onSubmit={hideModal}\n        />\n      </Nav>\n    </Container>\n  );\n}\n\nexport default AddShape;\n","import React, { FC, useEffect, useContext } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Shape from './Shape';\nimport AddShape from './AddShape';\nimport { Context as ShapesContext } from '../context/ShapesContext';\nimport { addShapes, fetchError } from '../actions/ShapeActions';\nimport { ShapeType, ShapeTypesType } from '../types';\nimport { getShapes } from '../requests';\n\nconst ShapesList: FC = () => {\n  const {\n    state: { loading, error, shapes },\n    dispatch,\n  } = useContext(ShapesContext);\n\n  useEffect(() => {\n    const fetchShapes = async () => {\n      try {\n        const result = await getShapes();\n\n        dispatch(addShapes(result.shapes));\n      } catch (error) {\n        dispatch(fetchError(error));\n      }\n    };\n\n    fetchShapes();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (loading) {\n    return (\n      <div className='text-center'>\n        <Spinner\n          className='align-middle'\n          animation='border'\n          role='status'\n          variant='primary'\n        >\n          <span className='sr-only'>Loading</span>\n        </Spinner>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Alert variant='danger'>\n              No shapes to play with right now. Try again later.\n            </Alert>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <Row>\n        <AddShape />\n      </Row>\n      <Row>\n        {shapes.map((shape: ShapeType) => {\n          const { id, type } = shape;\n\n          return (\n            <Col className='pt-4' xs='4' key={id}>\n              <Shape type={type as ShapeTypesType} />\n            </Col>\n          );\n        })}\n      </Row>\n    </Container>\n  );\n};\n\nexport default ShapesList;\n","import React from 'react';\nimport { Provider as ShapesProvider } from './context/ShapesContext';\nimport ShapesList from './components/ShapesList';\n\nfunction App() {\n  return (\n    <ShapesProvider>\n      <ShapesList />\n    </ShapesProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}